pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
--main

--to-do
	--particle when bullet hits
	--more levels
	 
function _init()
	stage = 0
	upd = menu
	draw = draw_main_menu
	--draw = draw_game_over
	--start_game()
end

function menu()
	music(18, 10000)
end


function start_game() 
	if (stage > 7) then
		upd = menu
		draw = draw_game_over
	end
	reload()
	walls = {}
	move_mouse_time_scale = 0.3
	pause_time_scale = 0.3
	move_time_scale = 1
	time_scale = pause_time_scale
	entities = {}
	enemies = {}
	enemy_bullets = {}
	bullets = {}

	parts={}
	
	aim_angle = 90
	shake = 0
	
	
	--spawn_player()
	
	spawn_entities()
	
	--create_enemy(20, 20)
	
	--add_collider(player)
	
	dir_x = {-1,1,0,0}
	dir_y = {0,0,-1,1}
	
	poke(0x5f2d, 1)
	mouse_x = stat(32)
	mouse_y = stat(33)
	
	y_dir = 0
	frames = 0
	frame_last = frames
end

function _update60()
	--play_game()
	
	upd()
end

function _draw()

	draw()
	--draw_game()
end

function spawn_entities()
	--map()
	for j= 0 ,15 do
		for i= stage*16, stage*16+15 do
			local x = (i - (stage*16)) * 8
			local y = j * 8
			local tile = mget(i,j)
			if (fget(tile, 1)) then
				mset(i, j, 0)
				create_enemy(x,y)
			elseif (fget(tile, 0)) then
				create_wall(x,y)
			elseif (fget(tile, 2)) then
				mset(i, j, 0)
				spawn_player(x,y)
			end
		end
	end

end


function spawn_player(_x,_y)
	player = new_entity(6)
	
	add_position(
		player, _x, _y, 8, 8
	)
	
end
-->8
--update

function play_game()
	check_game_state()
	frames+=time_scale
	update_mouse_pos()
	
	
	if ((frames - frame_last) >= 1) then
		update_game()
		frame_last = frames
	end
	
	local moved = false
 for i=0,3 do
 	if (btn(i,1)) then
 		local mov_x = dir_x[i + 1]
 		local mov_y = dir_y[i + 1]
 		if(move_entity(player,mov_x, mov_y)) then
 			moved = true
 		end
 	end
 end
 
 for i=0,3 do
 	if (btn(i,0)) then
 		mouse_x += dir_x[i + 1] * 2
 		mouse_y += dir_y[i + 1] * 2
 	end
 end
 
 if (mouse_x < 0) then
		mouse_x = 0
	end
	if mouse_x > 128 then
		mouse_x = 128
	end
	
	if mouse_y < 0 then
		mouse_y = 0
	end
	
	if mouse_y > 128 then
		mouse_y = 128
	end
 
 
 if moved then 
 	time_scale = move_time_scale
 else 
 	time_scale = pause_time_scale 
 end
	
	

	if stat(34) == 1 or btn(4) == true then
 	if (player == nil) return
 	if (player.t < player.fire_rate) return
 	
 	local bullet = new_bullet(
 		player.pos.x + player.pos.w / 2, 
 		player.pos.y + player.pos.h / 2, 
 		2,
 		aim_angle,
 		0,
 		9)
 	add(entities, bullet)
 	player.t = 0
 end
end

function update_game()

	do_shake()
 
 aim_angle = get_angle(
 	player.pos.x + player.pos.w / 2,
 	player.pos.y + player.pos.h / 2,
 	mouse_x,
 	mouse_y
 )
 
 player.aim_angle = aim_angle
 
 for e in all (entities) do
		e.update()
	end
	
	for bullet in all (bullets) do
 	for enemy in all (enemies) do
 		local enemy_rect = {
 			x = enemy.pos.x + enemy.pos.w/2,
 			y = enemy.pos.y + enemy.pos.h/2,
 			w = enemy.pos.w,
 			h = enemy.pos.h
 		}
 		if (cir_int_rect(bullet, enemy_rect)) then
 			del(enemies, enemy)
 			del(bullets, bullet)
 			del(entities, enemy)
 			del(entities, bullet)
 			sfx(3)
				shake = 0.5 			
 		end
 	end
 end
 
 for enemy_bullet in all (enemy_bullets) do
 	local player_rect = {
 			x = player.pos.x + player.pos.w/2,
 			y = player.pos.y + player.pos.h/2,
 			w = player.pos.w,
 			h = player.pos.h
 	}
 	if (cir_int_rect(enemy_bullet, player_rect)) then
 		del(entities, player)
 		del(enemy_bullets, enemy_bullet)
 		del(entities, enemy_bullet)
 		start_game()
 		return
 	end
 end
 
 for bullet in all (bullets) do
 	for wall in all (walls) do
 		local wall_rect = {
 			x = wall.pos.x + wall.pos.w/2,
 			y = wall.pos.y + wall.pos.h/2,
 			w = wall.pos.w,
 			h = wall.pos.h
 		}
 		if (cir_int_rect(bullet, wall_rect)) then
 			del(bullets, bullet)
 			del(entities, bullet)
 			sfx(5)
 		end
 	end
 end
 
 for enemy_bullet in all (enemy_bullets) do
 	for wall in all (walls) do
 		local wall_rect = {
 			x = wall.pos.x + wall.pos.w/2,
 			y = wall.pos.y + wall.pos.h/2,
 			w = wall.pos.w,
 			h = wall.pos.h
 		}
 		if (cir_int_rect(enemy_bullet, wall_rect)) then
 			del(enemy_bullets, enemy_bullet)
 			del(entities, enemy_bullet)
 			sfx(5)
 		end
 	end
 end
 
 
 update_parts()
end

function move_entity(ent,mov_x, mov_y) 
	local col_l = flr(
		(ent.pos.x + mov_x) / 8
	)
	local col_r = flr(
		(ent.pos.x + ent.pos.w + mov_x - 1) / 8
	)
	local row_t = flr(
		(ent.pos.y + mov_y) / 8
	)
	local row_b = flr(
		(ent.pos.y + ent.pos.h + mov_y - 1) / 8
	)
	
	if (
		is_walkable(col_l, row_t) and
		is_walkable(col_l, row_b) and
		is_walkable(col_r, row_t) and
		is_walkable(col_r, row_b)
	) then
	 ent.pos.x += mov_x
		ent.pos.y += mov_y
		return true
	end
	return false
end

function is_walkable(x, y) 
	local tle = mget(x + stage * 16,y)
	return not fget(tle, 0)
end


function update_mouse_pos()
	poke(0x5f2d, 1)
	mouse_x = stat(32)
	mouse_y = stat(33)
end

function check_game_state()
	if #enemies == 0 then
	
		stage += 1
		start_game()
	end
end

-->8
--draw and particles
function draw_game()
	cls()
	if (stage < 2) then
		print("s: ⬅️ e:⬆️ f:➡️ d:⬇️",24,10,5)
		print("use mouse to aim and shoot",13,18,5)
	end
	
	draw_parts()
	for e in all (entities) do
		e.draw()
	end
	
	map(16*stage,0,0,0,16,16)
	spr(4, mouse_x - 4, mouse_y - 4)
	--map(16,0,0,16,16)
	
	
end

function draw_main_menu()
	cls()
	map(0,16,0,0,16,16)
	print('press ❎ to begin',26, 85)
	
	if(btn(5) == true) then
			stage = 0
			start_game()
			upd = play_game
			draw = draw_game
	end
	
end

function draw_game_over()
	cls()
	map(0,16,0,-20,16,16)
	print('you win!',45, 70, 7)
	print('thanks for playing!',23, 83, 7)
	print('press ❎ to restart',23, 95,7)
	
	if(btn(5) == true) then
			stage = 0
			start_game()
			upd = play_game
			draw = draw_game
	end
	
end

--add a particle
function add_part(_x,_y,_type,_maxage)
	local _p = {}
	_p.x = _x
	_p.y = _y
	_p.type = _type
	_p.maxage = _maxage
	_p.age = 0
	_p.color = 10
	
	add(parts, _p)
end

--spawn a trail particle
function spawn_trail(_x, _y)
	local _ang = rnd()
	local _ox = sin(_ang) * 1.5
	local _oy = cos(_ang) * 1.5
	
	add_part(_x +_ox,_y+_oy,0,6+rnd(6))
end

function update_parts()
	local _p
	for i=#parts,1,-1 do
		_p = parts[i]
		_p.age+=1
		
		if _p.age > _p.maxage then
			del(parts, parts[i])
		end

		local percentage =
			_p.age / _p.maxage
			
		if percentage > 0.65 then
			_p.color = 4
		elseif percentage > 0.35 then
			_p.color = 9
		end
	
	end
end

function draw_parts()
	for i=1,#parts do
		local _p = parts[i]
		
		if _p.type == 0 then
			pset(_p.x, _p.y, _p.color)
		end
	end
end


function do_shake()
	local shake_x = 16 - rnd(32)
	local shake_y = 16 - rnd(32)
	
	shake_x = shake_x * shake
	shake_y = shake_y * shake
	
	camera(shake_x, shake_y)
	
	shake = shake * 0.95
	
	if (shake < 0.05) then
		shake = 0
	end
end


-->8
--entity

function new_entity(index)
	local e = {}
 
 e.sprite = sprite
 e.fire_rate = 20
 e.t = e.fire_rate
 e.aim_angle = 0
 

 
	e.draw = function() 
		if e.pos then
			local flp = get_flip(e.aim_angle)
			spr(
				index + flp.index, 
				e.pos.x, 
				e.pos.y,
				e.pos.w / 8,
				e.pos.h / 8,
				flp.flip_x,
				flp.flip_y
			)
		end
	end
	
	e.update = function()
	
		if e.pos then
			e.pos.x += e.pos.vx
			e.pos.y += e.pos.vy
		end
		e.t += 1
		
	end
	
	add(entities, e)
	return e
end

function new_bullet(x, y,r, ang, typ,clr)
	local bullet_speed = 2
	local vec_x = cos(ang/360)
	local vec_y = sin(ang/360)
	local b = {}
	
	
	if time_scale == 0.3 then
		sfx(2)
	else
		sfx(1)
	end

	if (typ == nil) then
		typ = 0
	end
	
	if (clr == nil) then
		clr = 5
	end
	b.r = r
	b.x = x
	b.y = y
	b.t = 0
	b.aim_angle = ang
	b.clr = clr
	
	b.vx = vec_x * bullet_speed
	b.vy = vec_y * bullet_speed
	b.draw = function() 
		circfill(
			b.x,b.y,b.r,b.clr
		)
		--[[
		for i=1, 10 do
			if (i < 3) then
				circfill(b.x - vec_x * i, b.y - vec_y * i,3,6)
			elseif (i < 7) then
				circfill(b.x - vec_x * i, b.y - vec_y * i,2,6)
			elseif (i <= 11) then
				circfill(b.x - vec_x * i, b.y - vec_y * i,1,6)
			end
		end
		]]
	end
	
	b.update = function() 
	
		if (
			b.x < 0 or 
			b.x > 128 or 
			b.y < 0 or
			b.y > 128 
		) then
		 del(entities, b)
		end

		b.x += b.vx
		b.y += b.vy
		
		
		spawn_trail(b.x, b.y)
		spawn_trail(b.x, b.y)
		spawn_trail(b.x, b.y)
		spawn_trail(b.x, b.y)
	end
	
	if typ == 0 then
		add(bullets, b)
	else
		add(enemy_bullets, b)
	end
	
	return b
end

function create_enemy(x, y) 
	local enemy = new_entity(22)
	enemy.aim_angle = aim_angle
	add_position(
		enemy, x, y, 8, 8
	)
	add_collider(enemy)
	
	enemy.speed = 0.5
	enemy.fire_rate = 30 + rnd(50)
	
	enemy.update = function() 
	
		
		if enemy.pos then
			if (dist(
				enemy.pos.x + enemy.pos.w / 2,
				enemy.pos.y + enemy.pos.h / 2,
				player.pos.x + player.pos.w / 2,
				player.pos.y + player.pos.h / 2
			) > 80) then
				move_entity(enemy,enemy.pos.vx,enemy.pos.vy)
			end
		end
		
		enemy.aim_angle = get_angle(
	 	enemy.pos.x + enemy.pos.w / 2,
	 	enemy.pos.y + enemy.pos.h / 2,
	 	player.pos.x + player.pos.w / 2,
	 	player.pos.y + player.pos.h / 2
 	)
 	
 	
 	local ang = enemy.aim_angle
		local vec_x = cos(ang/360)
		local vec_y = sin(ang/360)
 	enemy.t += time_scale
		enemy.pos.vx = vec_x * enemy.speed
		enemy.pos.vy = vec_y * enemy.speed
	
		if (enemy.t < enemy.fire_rate) return 
 	
	 	local bullet = new_bullet(
	 		enemy.pos.x + enemy.pos.w / 2, 
	 		enemy.pos.y + enemy.pos.h / 2, 
	 		2,
	 		enemy.aim_angle, 
	 		1
	 	)
	 		add(entities, bullet)
	 		enemy.t = 0
 	end
		
		add(enemies, enemy)
end

function create_wall(_x,_y)
	local wall = new_entity(2)
	add_position(
		wall, _x, _y, 8, 8
	)
	
	add(walls, wall)
end

-->8
--component

function add_position(c,_x, _y, _w, _h)
	local p = {}
		p.x = _x
		p.y = _y
		p.w = _w
		p.h = _h
		p.vx = 0
		p.vy = 0
	c.pos = p
	return p
end

function add_collider(c)
	local cld = {}
	c.cld = cld
	return cld
end
-->8
--tool
function get_angle(x1,y1,x2,y2)
	local dx=x2-x1
	local dy=y2-y1
	
	return atan2(dx,dy) * 360
end


function deg_to_rad(deg)
	return deg / 180 * 3.1415
end

function get_flip(ang)
	--print(ang)
	local index = 0
	local flip_x = false
	local flip_y = false
	
	if (ang >= 337.5 or ang < 22.5) then
		--right
	elseif (ang >= 22.5 and ang < 67.5) then
		--up right
		index = 1
	elseif (ang >= 67.5 and ang < 112.5) then
		--up
		index = 2
	elseif (ang >= 112.5 and ang < 157.5) then
		--up left
		index = 1
		flip_x = true
	elseif (ang >= 157.5 and ang < 202.5) then
		--left
		flip_x = true
	elseif (ang >= 202.5 and ang < 247.5) then
		--down left
		index = 1
		flip_y = true
		flip_x = true
	elseif (ang >= 247.5 and ang < 292.5) then
		--down
		index = 2
		flip_y = true
	elseif (ang >= 292.5 and ang < 337.5) then
	--down right
		index = 1
		flip_y = true
	end 	
	
	return {
		index=index, 
		flip_x=flip_x, 
		flip_y=flip_y
	}
end

--[[
bool intersects(circletype circle, recttype rect)
{
    circledistance.x = abs(circle.x - rect.x);
    circledistance.y = abs(circle.y - rect.y);

    if (circledistance.x > (rect.width/2 + circle.r)) { return false; }
    if (circledistance.y > (rect.height/2 + circle.r)) { return false; }

    if (circledistance.x <= (rect.width/2)) { return true; } 
    if (circledistance.y <= (rect.height/2)) { return true; }

    cornerdistance_sq = (circledistance.x - rect.width/2)^2 +
                         (circledistance.y - rect.height/2)^2;

    return (cornerdistance_sq <= (circle.r^2));
}

]]

function cir_int_rect(_cir,_rect)
	local dist_x=abs(_cir.x-_rect.x)
	local dist_y=abs(_cir.y-_rect.y)
	
	if (dist_x > (_rect.w / 2 + _cir.r)) return false
	if (dist_y > (_rect.h / 2 + _cir.r)) return false
	
	if (dist_x <= _rect.w / 2) return true
	if (dist_y <= _rect.h / 2) return true
	
	local cornor_dist= 
		(dist_x - _rect.w / 2) * (dist_x - _rect.w / 2) + 
		(dist_y - _rect.h / 2) * (dist_y - _rect.h / 2)
	
	return cornor_dist <= _cir.r * _cir.r	 
end

function dist(x1,y1,x2,y2)
	return sqrt(
		(x2 - x1) * (x2 - x1) +
		(y2 - y1) * (y2 - y1)
	)
end
__gfx__
00000000000000006666666000000000007777000000000000000000000cc000000550006666666b008008000000000000000000000000000000000000000000
0000000000077000666666600000000007000070000000000cccccc000c7c5500cc55cc06666666b088888800000000000000000000000000000000000000000
00700700007fff00666666600000000070077007000000000cccc7c00ccc75500c7777c06666666b888880880000000000000000000000000000000000000000
00077000007fff00666666600000000070700707000000000ccff755cccff7cc0ccffcc06666666b888880880000000000000000000000000000000000000000
00077000005fff00666666600000000070700707000000000ccff755cccffc7c0ccffcc06666666b888888880000000000000000000000000000000000000000
0070070000755555666666600000000070077007000000000cccc7c00cccccc00cccccc06666666b088888800000000000000000000000000000000000000000
0000000000077555666666600005500007000070000000000cccccc000cccc000cccccc06666666b008888000000000000000000000000000000000000000000
00000000000000000000000000055000007777000000000000000000000cc00000000000bbbbbbbb000880000000000000000000000000000000000000000000
00000000000000000077770000055000000000000000000000000000000880000005500006566666500065000000000000000000000000000000000000000000
00000000000cc0000777777000000000000000000000000008888880008785500885588066600606650606550000000000000000000000000000000000000000
0000000000cfff007777777700000000000000000000000008888780088875500877778006506006065650660000000000000000000000000000000000000000
0000000000cfff0077777777000000000000000000000000088ff755888ff788088ff88066600000006065000000000000000000000000000000000000000000
00000000005fff0077777777000000000000000000000000088ff755888ff878088ff88006506666060006500000000000000000000000000000000000000000
0000000000c555557777777700000000000000000000000008888780088888800888888006606006600666600000000000000000000000000000000000000000
00000000000555550777777000000000000000000000000008888880008888000888888066506666000006600000000000000000000000000000000000000000
00000000000000000077770000000000000000000000000000000000000880000000000060660000000066000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cccccccccccccccccc000000cccccc0000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cccccccccccccccccc000000cccccc0000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cc000000cc0000cccc000000cc0000cc00000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cc000000cc0000cccc000000cc0000cc00000000
0000000000000000000000000000000660000000000000000000000000000000000000000000000000000000cc000000cc0000cccc000000cc0000cc00000000
00000000000000000000000000000006f0000000000000000000000000000000000000000000000000000000cc000000cc0000cccc00000ccc0000cc00000000
0000000000000000000000000000004440900000000000000000000000000000000000000000000000000000cccccccccccccccccccccccccccccc0000000000
0000000000000000000000000000004440000000000000000000000000000000000000000000000000000000cccccccccccccccccccccccccccccc0000000000
0000000000000000000000000000004445550000000000000000000000000000000000000000000000000000cccccccccc0000cccccccccccccccccccccccccc
00000000000000000000000000000006f5500000000000000000000000000000000000000000000000000000cccccccccc0000cccc0000cccccccccccccccccc
0000000000000000000000000000000660000000000000000000000000000000000000000000000000000000cc000000cc0000cccc0000cccc000000cc0000cc
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cc000000cc0000cccccccccccccccccccc0000cc
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cccccccccc0000cccccccccccccccccccccccccc
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cccc0000cccc000000cc000000ccccccc0
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cccccccccccc000000cccccccccc000ccc
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cccccccccccccccccc000000cccccccccc000ccc
__gff__
0000010000000400000100000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202
0200000000000000000000000000000202000000000000000000000000000002020000000000000000000000000000020200001616160000000000000000000202160000000000000000000000000002021600000000001600000000000016020216000000000016000000000000160202160000000000160000000000001602
0200000000000016000000000000000202000016000000000000000016000002020000000000000000000000000000020200000000000000000016000000000202000000000000000000000000000602020000000000000000000000000000020200000000000000000000000000000202000000000000000000000000000002
0200000000000000000000000000000202000000000000000000000000000002020000000000000000000000000000020200000000000000000000160000000202000000000000000000000000000002020000000000000000000000000000020200000000000000000000000000000202000000000000000000000000000002
0200000000000000000000000000000202000000000000000000000000000002020000000000000000000000000016020200000000000000000000001600000202160000000000000000000000000002020000000000000000000000000000020200000000000000000000000000000202000000000000000000000000000002
0200000000000000000000000000000202000000000000000000000000000002020000000000020202020202020202020200000000000000000000000000000202020202020200000000020202020202020000000202020202020202000000020200000000000000000000000000000202000000000000000000000000000002
0200000000000000000000000000000202000000000000000000000000000002020000000000000000000000000000020200000000000000000000000000000202020202020200000000020202020202020000000200000000000002000000020200000002000000000000020000000202000000000000000000000000000002
0200000000000000000000000000000202000000000000000000000000000002020000000000000000000000000000020200000000000000000000000000000202020202020200000000020202020202021600000200000006000002000016020216000002000000060000020000160202160000000000000000000000001602
0200000000000000000000000000000202000000000000000000000000000002020000000000000000000000000000020200000000000000000000000000000202020202020200000000020202020202020000000200000000000002000000020200000002000000000000020000000202000000000000060000000000000002
0200000000000000000000000000000202000000000000000000000000000002021600000000000000000000000000020200000000000000000000000000000202020202020200000000020202020202020000000200000000000002000000020200000002000000000000020000000202000000000000000000000000000002
0200000000020200000202000000000202020200000202000002020000020202020202020202020202020000000000020200000000000000000000000000000202020202020200000000020202020202020000000000000000000000000000020200000000000000000000000000000202000000000000000000000000000002
0200000000020200000202000000000202020200000202000002020000020202020000000000000000000000000016020202020200000000000000000202020202020202020200000000020202020202020000000000000000000000000000020200000000000000000000000000000202000000000000000000000000000002
0200000000000000000000000000000202000000000000000000000000000002020000000000000000000000000000020200000000000000000000000000000202020202020200000000020202020202020000000000000000000000000000020200000000000000000000000000000202000000000000000000000000000002
0200000000000000000000000000000202000000000000000000000000000002020000000000000000000000000000020200000000000000000000000000000202020202020200000000020202020202020000000000000000000000000000020200000000000000000000000000000202000000000000000000000000000002
0200000000000006000000000000000202000000000000060000000000000002020600000000000000000000000000020206000000000000000000000000000202020202020216000016020202020202021600000000001600000000000016020216000000000016000000000000160202160000000000160000000000001602
0202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000190000001a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000003b003c003d003e003f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000002b002c002d002e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
00010000096100e610126101561010610096100961012000090000000010600106001060010600106001060010600106000000000000000001430014300143001430013300123001130000000000000000000000
000100002671023710217101f7101d7101b71016710137100f71019700297002d7003270037700320000b00000000000000000000000000000000012000210002c00031000330000000000000000000000000000
00010000167101471012710107100d7100a71008710077100571019700297002d7003270037700320000b00000000000000000000000000000000012000210002c00031000330000000000000000000000000000
000100001a31018310163101c3100f310093101231004310013100131006310023100871008710087100871008710087100871015c00000001b100181001610014100111000d1000b10009100071000510001100
000100001661012610106100f6100a6100661008610086100761006610185000d5002c50010500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000100000531004310043100431004310043100331003310023100031000310003100031000310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011200000c0330802508744080250872508044187151b7151b7000f0251174411025246150f0240c7440c0250c0330802508744080250872508044247152b715275020f0251174411025246150f0240c7440c025
011200002452024520245122451524615187151b7151f71527520275202751227515246151f7151b7151f715295202b5212b5122b5152461524715277152e715275002e715275022e715246152b7152771524715
011200002352023520235122351524615177151b7151f715275202752027512275152461523715277152e7152b5202c5212c5202c5202c5202c5222c5222c5222b5202b5202b5222b515225151f5151b51516515
011200000c0330802508744080250872508044177151b7151b7000f0251174411025246150f0240b7440b0250c0330802508744080250872524715277152e715080242e715080242e715246150f0240c7440c025
011600000042500415094250a4250042500415094250a42500425094253f2050a42508425094250a425074250c4250a42503425004150c4250a42503425004150c42500415186150042502425024250342504425
011600000c0330c4130f54510545186150c0330f545105450c0330f5450c41310545115450f545105450c0230c0330c4131554516545186150c03315545165450c0330c5450f4130f4130e5450e5450f54510545
0116000005425054150e4250f42505425054150e4250f425054250e4253f2050f4250d4250e4250f4250c4250a4250a42513425144150a4250a42513425144150a42509415086150741007410074120441101411
011600000c0330c4131454515545186150c03314545155450c033145450c413155451654514545155450c0230c0330c413195451a545186150c033195451a5451a520195201852017522175220c033186150c033
010b00200c03324510245102451024512245122751127510186151841516215184150c0031841516215134150c033114151321516415182151b4151d215224151861524415222151e4151d2151c4151b21518415
011400001051512515150151a5151051512515150151a5151051512515150151a5151051512515150151a5151051512515170151c5151051512515170151c5151051512515160151c5151051512515160151c515
011400000c0330253502525020450e6150252502045025250c0330253502525020450e6150252502045025250c0330252502045025350e6150204502535025250c0330253502525020450e615025250204502525
011400002c7252c0152c7152a0252a7152a0152a7152f0152c7252c0152c7152801525725250152a7252a0152072520715207151e7251e7151e7151e715217152072520715207151e7251e7151e7151e7151e715
011400000c0330653506525060450e6150652506045065250c0330653506525060450e6150652506045065250c0330952509045095350e6150904509535095250c0330953509525090450e615095250904509525
0114000020725200152071520015217252101521715210152c7252c0152c7152c0152a7252a0152a7152a015257252501525715250152672526015267153401532725310152d715280152672525015217151c015
010e000005145185111c725050250c12524515185150c04511045185151d515110250c0451d5151d0250c0450a0451a015190150a02505145190151a015050450c0451d0151c0150012502145187150414518715
010e000021745115152072521735186152072521735186052d7142b7142971426025240351151521035115151d0451c0051c0251d035186151c0251d035115151151530715247151871524716187160c70724717
010e000002145185111c72502125091452451518515090250e045185151d5150e025090451d5151d025090450a0451a015190150a02505045190151a015050450c0451d0151c0150012502145187150414518715
010e000029045000002802529035186152802529035000001a51515515115150e51518615000002603500000240450000023025240351861523025240350000015515185151c51521515186150c615280162d016
010e000002145185112072521025090452451518515090450e04521515265150e025090451d5151d01504045090451d01520015210250414520015210250404509045280152d0150702505145187150414518715
011a00000173401025117341102512734120250873408025127341202501734010251173411025087340802505734050250d7340d025147341402506734060250873408025127341202511734110250d7340d025
010d00200c0331b51119515195152071220712145151451518615317151d5151d515125050c03314515145150c0330150519515195150d517205161451514515186153171520515205150d5110c033145150c033
011a00000a7340a02511734110250d7340d02505734050250673406025147341402511734110250d7340d0250a7340a02511734110250d7340d02508734080250373403025127341202511734110250d7340d025
010d00200c0331b511295122951220712207122c5102c51018615315143151531514295150c03329515295150c0330150525515255150d517205162051520515186153171520515205150d5110c033145150c033
01180000021100211002110021120e1140e1100e1100e1120d1140d1100d1100d1120d1120940509110091120c1100c1100c1100c1120b1110b1100b1100b1120a1100a1100a1100a11209111091100911009112
01180000117201172011722117221d7201d7201d7221d7221c7211c7201c7201c7201c7221c72218720187221b7211b7201b7201b7201b7221b7221d7221d7221a7201a7201a7201a7201a7221a7221672016722
011800001972019720197221972218720187201872018720147201472015720157201f7211f7201d7201d7201c7201c7201c7221c7221a7201a7201a7221a7251a7201a7201a7221a72219721197201972219722
011800001a7201a7201a7221a7221c7201c7201c7221c7221e7201e7202172021720247212472023720237202272022720227202272022722227221f7201f7202272122720227202272221721217202172221722
0118000002114021100211002112091140911009110091120e1140e1100c1100c1120911209110081100811207110071100711007112061110611006110061120111101110011100111202111021100211002112
0118000020720207202072220722217202172021722217222b7212b72029720297202872128720267202672526720267202672026720267222672228721287202672026720267202672225721257202572225722
010e00000c0231951517516195150c0231751519516175150c0231951517516195150c0231751519516175150c023135151f0111f5110c0231751519516175150c0231e7111e7102a7100c023175151951617515
010e000000130070200c51000130070200a51000130070200c51000130070200a5200a5200a5120a5120a51200130070200c51000130070200a51000130070200c510001300b5200a5200a5200a5120a5120a512
010e00000c0231e5151c5161e5150c0231c5151e5161c5150c0231e5151c5161e5150c0231c5151e5161c5150c0230c51518011185110c0231c5151e5161c5150c0231e7111e7102a7100c023175151951617515
010e0000051300c02011010051300c0200f010051300c02011010051300c0200f0200f0200f0120f0120f012061300d02012010071300e02013010081300f0201503012020140101201015030120201401012010
010700000c5370f0370c5270f0270f537120370f527120271e537230371e527230272f537260372f52726027165371903716527190271c537190371c527210271c53621036245262102624536330362452633026
018800000074400730007320073200730007300073200732007300073200730007320073000732007320073200732007300073000730007320073000730007300073200732007300073000732007300073200732
01640020070140801107011060110701108011070110601100013080120701106511070110801707012060110c013080120701106011050110801008017005350053408010070110601100535080170701106011
018800000073000730007320073200730007300073200732007300073200730007320073000732007320073200732007300073000730007320073000730007300073200732007300073000732007300073200732
0164002006510075110851707512060110c0130801207011060110501108017070120801107011060110701108011075110651100523080120701108017005350053408012070110601100535080170701106511
011800001d5351f53516525275151d5351f53516525275151f5352053518525295151f5352053518525295151f5352053517525295151f5352053517525295151d5351f53516525275151d5351f5351652527515
010c00200c0330f13503130377140313533516337140c033306150c0330313003130031253e5153e5150c1430c043161340a1351b3130a1353a7143a7123a715306153e5150313003130031251b3130c0331b313
010c00200c0331413508130377140813533516337140c033306150c0330813008130081253e5153e5150c1330c0430f134031351b313031353a7143a7123a715306153e5150313003130031251b3130c0333e515
011800001f5452253527525295151f5452253527525295151f5452253527525295151f5452253527525295151f5452353527525295151f5452353527525295151f5452253527525295151f545225352752529515
010c002013035165351b0351d53513025165251b0251d52513015165151b0151d51513015165151b0151d51513015165151b0151d51513015165151b0151d51513015165151b0151d51513015165251b0351d545
011200000843508435122150043530615014351221502435034351221508435084353061512215054250341508435084350043501435306150243512215034351221512215084350843530615122151221524615
011200000c033242352323524235202351d2352a5111b1350c0331b1351d1351b135201351d135171350c0330c0332423523235202351d2351b235202352a5110c03326125271162c11523135201351d13512215
0112000001435014352a5110543530615064352a5110743508435115152a5110d43530615014352a511084150d4350d4352a5110543530615064352a5110743508435014352a5110143530615115152a52124615
011200000c033115152823529235282352923511515292350c0332823529216282252923511515115150c0330c033115151c1351d1351c1351d135115151d1350c03323135115152213523116221352013522135
0112000001435014352a5110543530615064352a5110743508435115152a5110d435306150143502435034350443513135141350743516135171350a435191351a1350d4351c1351d1351c1351d1352a5001e131
011200000c033115152823529235282352923511515292350c0332823529216282252923511515115150c0330c033192351a235246151c2351d2350c0331f235202350c033222352323522235232352a50030011
0114001800140005351c7341c725247342472505140055352173421725287342872504140045351f7341f725247342472502140025351d7341d72524734247250000000000000000000000000000000000000000
011400180c043287252b0152f72534015377253061528725290152d72530015377250c0432f7253001534725370153c725306152b7252d01532725370153b7250000000000000000000000000000000000000000
0114001809140095351f7341f7252473424725091400953518734187251f7341f72505140055351f7341f7252473424725051400553518734187251f7341f7250000000000000000000000000000000000000000
0114001802140025351f7341f725247342472504140045351f7341f725247342472505140055352b7242b715307243071507140075352b7242b71534724347150000000000000000000000000000000000000000
011400180c0433772534015307252f0152d725306152d7252f0153072534015377250c0433772534015307252f0152d725306152d7252f0153072534015377250000000000000000000000000000000000000000
011400180c0433c7253701534725300152f725306152f7253001534725370153c7250c0433c7253701534725300152f725306152f7253001534725370153c7250000000000000000000000000000000000000000
011400180c043287252b0152f725340153772530615287252901530725370153c7250c043287252901530725370153c72530615287252901530725370153c7250000000000000000000000000000000000000000
011400180c003287052b0052f705340053770530605287052900530705370053c7050c0032f7053000534705370053c705306052b7052d00532705370053b7050000000000000000000000000000000000000000
000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
00 00014344
00 00014344
01 00014344
00 00014344
00 02034344
02 02034344
00 04424344
00 04424344
00 04054344
00 04054344
01 04054344
00 04054344
00 06074344
02 08094344
01 0a0b4344
00 0c0d4344
00 0a0e4344
02 0c0e4344
00 10424344
01 100f4344
00 100f4344
00 10114344
00 12114344
02 12134344
01 14154344
00 14154344
00 16154344
00 16154344
00 18174344
02 16174344
00 19424344
01 191a4344
00 191a4344
00 1b1a4344
00 191c4344
02 1b1c4344
01 1d1e4344
00 1d1f4344
00 1d1e4344
00 1d1f4344
00 21204344
02 1d224344
00 27424344
01 24234344
00 24234344
02 26254344
01 28294344
03 2a2b4344
01 2d304344
00 2e304344
00 2d304344
00 2e304344
00 2d2c4344
00 2d2c4344
02 2e2f4344
01 31324344
00 31324344
00 33344344
02 35364344
01 3738433f
00 3738433f
00 393b433f
00 393c433f
02 3a3d433f

